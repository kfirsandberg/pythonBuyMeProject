{"name": "test_send", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li id=\"ember1807\" value=\"10\" class=\"ember-view bm-select-option\" role=\"option\" tabindex=\"-1\" aria-selected=\"false\" uaindex=\"1\">...</li> is not clickable at point (741, 553). Other element would receive the click: <li id=\"ember1806\" class=\"prompnativest ember-view bm-select-option selected\" role=\"option\" tabindex=\"-1\" aria-selected=\"true\" uaindex=\"0\">...</li>\n  (Session info: chrome=116.0.5845.96)\nStacktrace:\n0   chromedriver                        0x0000000100c5265c chromedriver + 4318812\n1   chromedriver                        0x0000000100c4ad00 chromedriver + 4287744\n2   chromedriver                        0x000000010087c7ec chromedriver + 296940\n3   chromedriver                        0x00000001008c091c chromedriver + 575772\n4   chromedriver                        0x00000001008beb08 chromedriver + 568072\n5   chromedriver                        0x00000001008bc844 chromedriver + 559172\n6   chromedriver                        0x00000001008bb930 chromedriver + 555312\n7   chromedriver                        0x00000001008aff90 chromedriver + 507792\n8   chromedriver                        0x00000001008af858 chromedriver + 505944\n9   chromedriver                        0x00000001008f2d28 chromedriver + 781608\n10  chromedriver                        0x00000001008ae178 chromedriver + 500088\n11  chromedriver                        0x00000001008aefc0 chromedriver + 503744\n12  chromedriver                        0x0000000100c12c40 chromedriver + 4058176\n13  chromedriver                        0x0000000100c17160 chromedriver + 4075872\n14  chromedriver                        0x0000000100bdae68 chromedriver + 3829352\n15  chromedriver                        0x0000000100c17c4c chromedriver + 4078668\n16  chromedriver                        0x0000000100beff08 chromedriver + 3915528\n17  chromedriver                        0x0000000100c34140 chromedriver + 4194624\n18  chromedriver                        0x0000000100c342c4 chromedriver + 4195012\n19  chromedriver                        0x0000000100c444d0 chromedriver + 4261072\n20  libsystem_pthread.dylib             0x000000019ce5426c _pthread_start + 148\n21  libsystem_pthread.dylib             0x000000019ce4f08c thread_start + 8", "trace": "self = <tests_Buyme.TestSignUp testMethod=test_send>\n\n    def test_send(self):\n        data =json_setup()\n        self.driver.get(data['url2'])\n>       BasePage.send(self)\n\nTests_Buyme.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nBasePage.py:53: in send\n    '//li[@class=\"ember-view bm-select-option\"]'))).click()\n../../Library/Caches/pypoetry/virtualenvs/pythonbuymeproject-LFQ1HAcB-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../Library/Caches/pypoetry/virtualenvs/pythonbuymeproject-LFQ1HAcB-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../Library/Caches/pypoetry/virtualenvs/pythonbuymeproject-LFQ1HAcB-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10507a8d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...00019ce5426c _pthread_start + 148\\\\n21  libsystem_pthread.dylib             0x000000019ce4f08c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li id=\"ember1807\" value=\"10\" class=\"ember-view bm-select-option\" role=\"option\" tabindex=\"-1\" aria-selected=\"false\" uaindex=\"1\">...</li> is not clickable at point (741, 553). Other element would receive the click: <li id=\"ember1806\" class=\"prompnativest ember-view bm-select-option selected\" role=\"option\" tabindex=\"-1\" aria-selected=\"true\" uaindex=\"0\">...</li>\nE         (Session info: chrome=116.0.5845.96)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100c5265c chromedriver + 4318812\nE       1   chromedriver                        0x0000000100c4ad00 chromedriver + 4287744\nE       2   chromedriver                        0x000000010087c7ec chromedriver + 296940\nE       3   chromedriver                        0x00000001008c091c chromedriver + 575772\nE       4   chromedriver                        0x00000001008beb08 chromedriver + 568072\nE       5   chromedriver                        0x00000001008bc844 chromedriver + 559172\nE       6   chromedriver                        0x00000001008bb930 chromedriver + 555312\nE       7   chromedriver                        0x00000001008aff90 chromedriver + 507792\nE       8   chromedriver                        0x00000001008af858 chromedriver + 505944\nE       9   chromedriver                        0x00000001008f2d28 chromedriver + 781608\nE       10  chromedriver                        0x00000001008ae178 chromedriver + 500088\nE       11  chromedriver                        0x00000001008aefc0 chromedriver + 503744\nE       12  chromedriver                        0x0000000100c12c40 chromedriver + 4058176\nE       13  chromedriver                        0x0000000100c17160 chromedriver + 4075872\nE       14  chromedriver                        0x0000000100bdae68 chromedriver + 3829352\nE       15  chromedriver                        0x0000000100c17c4c chromedriver + 4078668\nE       16  chromedriver                        0x0000000100beff08 chromedriver + 3915528\nE       17  chromedriver                        0x0000000100c34140 chromedriver + 4194624\nE       18  chromedriver                        0x0000000100c342c4 chromedriver + 4195012\nE       19  chromedriver                        0x0000000100c444d0 chromedriver + 4261072\nE       20  libsystem_pthread.dylib             0x000000019ce5426c _pthread_start + 148\nE       21  libsystem_pthread.dylib             0x000000019ce4f08c thread_start + 8\n\n../../Library/Caches/pypoetry/virtualenvs/pythonbuymeproject-LFQ1HAcB-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "start": 1692529876008, "stop": 1692529881451, "uuid": "578e1c43-d09e-4852-8f37-6dbc66646f40", "historyId": "c7e3fd9dab1a51992ef24a51628d6326", "testCaseId": "c7e3fd9dab1a51992ef24a51628d6326", "fullName": "tests_Buyme.TestSignUp#test_send", "labels": [{"name": "suite", "value": "tests_Buyme"}, {"name": "subSuite", "value": "TestSignUp"}, {"name": "host", "value": "Kfirs-MacBook-Pro.local"}, {"name": "thread", "value": "51224-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_Buyme"}]}