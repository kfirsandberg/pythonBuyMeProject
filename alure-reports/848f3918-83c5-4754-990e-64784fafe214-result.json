{"name": "test_sign_in", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=116.0.5845.96)\nStacktrace:\n0   chromedriver                        0x000000010530665c chromedriver + 4318812\n1   chromedriver                        0x00000001052fed00 chromedriver + 4287744\n2   chromedriver                        0x0000000104f30644 chromedriver + 296516\n3   chromedriver                        0x0000000104f68594 chromedriver + 525716\n4   chromedriver                        0x0000000104f67068 chromedriver + 520296\n5   chromedriver                        0x0000000104f63858 chromedriver + 505944\n6   chromedriver                        0x0000000104fa6d28 chromedriver + 781608\n7   chromedriver                        0x0000000104f62178 chromedriver + 500088\n8   chromedriver                        0x0000000104f62fc0 chromedriver + 503744\n9   chromedriver                        0x00000001052c6c40 chromedriver + 4058176\n10  chromedriver                        0x00000001052cb160 chromedriver + 4075872\n11  chromedriver                        0x000000010528ee68 chromedriver + 3829352\n12  chromedriver                        0x00000001052cbc4c chromedriver + 4078668\n13  chromedriver                        0x00000001052a3f08 chromedriver + 3915528\n14  chromedriver                        0x00000001052e8140 chromedriver + 4194624\n15  chromedriver                        0x00000001052e82c4 chromedriver + 4195012\n16  chromedriver                        0x00000001052f84d0 chromedriver + 4261072\n17  libsystem_pthread.dylib             0x000000019ce5426c _pthread_start + 148\n18  libsystem_pthread.dylib             0x000000019ce4f08c thread_start + 8", "trace": "self = <tests_Buyme.TestSignUp testMethod=test_sign_in>\n\n    def test_sign_in(self):\n>       BasePage.sign_page(self)\n\nTests_Buyme.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nBasePage.py:19: in sign_page\n    self.driver.find_element(By.ID, 'ember1938').send_keys('Kfir1234')\n../../Library/Caches/pypoetry/virtualenvs/pythonbuymeproject-LFQ1HAcB-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../Library/Caches/pypoetry/virtualenvs/pythonbuymeproject-LFQ1HAcB-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../Library/Caches/pypoetry/virtualenvs/pythonbuymeproject-LFQ1HAcB-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1050ef050>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...00019ce5426c _pthread_start + 148\\\\n18  libsystem_pthread.dylib             0x000000019ce4f08c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=116.0.5845.96)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010530665c chromedriver + 4318812\nE       1   chromedriver                        0x00000001052fed00 chromedriver + 4287744\nE       2   chromedriver                        0x0000000104f30644 chromedriver + 296516\nE       3   chromedriver                        0x0000000104f68594 chromedriver + 525716\nE       4   chromedriver                        0x0000000104f67068 chromedriver + 520296\nE       5   chromedriver                        0x0000000104f63858 chromedriver + 505944\nE       6   chromedriver                        0x0000000104fa6d28 chromedriver + 781608\nE       7   chromedriver                        0x0000000104f62178 chromedriver + 500088\nE       8   chromedriver                        0x0000000104f62fc0 chromedriver + 503744\nE       9   chromedriver                        0x00000001052c6c40 chromedriver + 4058176\nE       10  chromedriver                        0x00000001052cb160 chromedriver + 4075872\nE       11  chromedriver                        0x000000010528ee68 chromedriver + 3829352\nE       12  chromedriver                        0x00000001052cbc4c chromedriver + 4078668\nE       13  chromedriver                        0x00000001052a3f08 chromedriver + 3915528\nE       14  chromedriver                        0x00000001052e8140 chromedriver + 4194624\nE       15  chromedriver                        0x00000001052e82c4 chromedriver + 4195012\nE       16  chromedriver                        0x00000001052f84d0 chromedriver + 4261072\nE       17  libsystem_pthread.dylib             0x000000019ce5426c _pthread_start + 148\nE       18  libsystem_pthread.dylib             0x000000019ce4f08c thread_start + 8\n\n../../Library/Caches/pypoetry/virtualenvs/pythonbuymeproject-LFQ1HAcB-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException"}, "start": 1692529881477, "stop": 1692529898141, "uuid": "5f58068f-e678-4939-8efd-6fa86c309bf5", "historyId": "0132437bc7f6c9e5a013956bfdbd54b8", "testCaseId": "0132437bc7f6c9e5a013956bfdbd54b8", "fullName": "tests_Buyme.TestSignUp#test_sign_in", "labels": [{"name": "suite", "value": "tests_Buyme"}, {"name": "subSuite", "value": "TestSignUp"}, {"name": "host", "value": "Kfirs-MacBook-Pro.local"}, {"name": "thread", "value": "51224-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_Buyme"}]}